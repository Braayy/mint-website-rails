- set_meta_tags title: 'Guide / Reference / Control Expressions / parallel'

%h1 parallel

%p
  %code parallel
  expressions allow you to do things in parallel, and then do things with
  their results.

%p
  A
  %code parallel
  expression is built up from multiple parts:

%ul
  %li
    expressions or statements that return a
    %code Promise
    or a
    %code Result

  %li
    an optional
    %code then
    branch

  %li
    %code catch
    branches

  %li
    an optional
    %code finally
    branch

%p
  An example:

%pre
  %code
    :escaped
      parallel {
        articles =
          loadImages()

        users =
          loadUsers()
      } then {
        next {
          articles = articles,
          users = users,
        }
      } catch {
       /* errors are caught here. */
      } finally {
        /* Clean things up here. */
      }

%p
  Keep in mind that
  %b you need to handle all possible errors
  that can be returned from a statement, although the compiler has your back
  here and will show an error if you forget one.

%p
  The return value of a
  %code parallel
  expression is always a
  %code Promise(error, result)
  \:

%ul
  %li
    If the value of the
    %code then
    branch is a
    %code Promise
    then it will be returned as is

  %li
    If the value of the
    %code then
    branch is not a
    %code Promise
    then it will return a promise which never fails
    %code Promise(Never, result)
    where the
    %coce result
    is the value of the
    %code then
    branch

  %li
    If there is no
    %code then
    branch then the return value is
    %code Promise(Never, Void)

%p
  A few notable things to keep in mind:

%ul
  %li
    All of the catches must match the return value of the last statement

  %li
    Results are unwrapped into variables

  %li
    Promises are
    %code await
    \-ed and unwrapped into variables
